
git

配置以及修改user信息

git config --global user.name 'you_name'
git config --global user.email 'you_email@qq.com'

现有设备中的所有配置
git config --list

现有设备中的所有配置
git config --list --local/--global/--system  优先级为 >


把已有项目纳入git管理
cd project
git init

新建项目
新建文件夹 www
cd www
git init you_project
cd you_project

添加文件需要两步
添加到缓存区
git add css/ index.js
提交文件
git commit git.text -m "本次提交说明内容"

git status 列出仓库的状态，未管理的文件

git add -u 对所有修改的文件做添加到暂存区
git status 会列出所有状态的文件
git commit -m"修改git.text文件"

git 修改文件名
mv index.js index.ts
git add index.ts
git rm index.js
git git status
git reset --hard  清除暂存区里面的数据，不会破坏版本历史

git修改文件名
git mv index.js index.ts
git status
git commit -m "重名名index.js为index.ts"


git log --oneline  简洁的查看
git log -n2 --oneline  查看最近的两个版本
<<<<<<< HEAD
git log --all --oneline 查看所有分支
$ git log --all --oneline --graph 图表方式查看所有分支


git commit -am"编辑git.text文件"  工作区的文件直接创建到版本库

.get目录的讲解
.get/HEAD 指向当前的分支  编辑改文件类似于git checkout master 切换分支的作用
HEAD 引用指向refs refs里面包括了（tags 里程碑标记主要标记位置  heads  分支  独立的空间，比如两个可以独立工作，然后合并到一个系统）

git checkout master 切换到主分支

cat ./.git/config  编辑改文件类似命令git config命令设置的作用
如果设置了local的用户，则会显示

git cat-file -t xxx 查看xxx的类型
git cat-file -p xxx 查看xxx的内容

git branch -av 查看所有分支
git checkout master 切换分支到master

git checkout -b fix_text fix_xxx 切换分支到fix_text

git branch -D xxx  删除分支xxx
git branch -av

git commit --amend 修改当前分支最近的commit的message
git log -l

git branch -av
git rebase -i 合并多个commite记录
git log --graph

git rebase -i  xxxx xxxx 合并多个不连续的commit

git diff --cached 暂存区与HEAD的差距
git commit -m"确认没问题提交"

git diff 工作区与暂存区的差异
git diff -- index.html  style.cxx 查看index.html style.cxx 差异

git status
git reset HEAD 暂存区恢复和HEAD一样（指向当前分支最新的commit）


git checkout -- index.html 工作区的文件恢复到暂存区

git reset HEAD -- style.css 取消部分暂存区文件的更改

git reset --head xxxx 消除最近几次的commit提交（工作、暂存区、HEAD恢复到某次提交）

git diff temp master查看两个分支中的差异
git diff temp master -- index.html 查看两个分支中index.html的差异

删除文件的方法一
rm index.html 
git rm index.html
git status 

git reset --hard HEAD
git status
git rm index.html  删除文件

git status
git stash 
git stash list 
git stash apply 之前存放的内容放到工作区 
git reset --hard HEAD

vi .gitignore 添加不受git控制的文件

git clone --bare /user/xxx 无进度条
git clone --bare file:///user/xxx  有进度条

git remote -v 查看所有远端
git remote add zhineng file:///user/xxx/zhineng.git 本地同步到远端
git push --set-upstream zhineng siyecao

ssh-keygen -t rsa -b 4096 -c "11@qq.com"


git remote -v 查看所有远程仓库配置

git remote add github git@github.com:git2000/git_learning.git 新增一个远端的站点
git remote -v

git push github --all
先拉后推
gitk -all
git pull (先拉、合并，两步合并了)
git fetch github master
git branch -v
git branch -va 远端的也会列出
git checkout master
git merge github/master 
git merge --allow-unrelated-histories github/master
gitk --all
git push github master


git commit -am"编辑git.text文件"  工作区的文件直接创建到版本库
git branch -v 查看分支信息
git branch -al 查看所有分支信息
git checkout -b temp  b42031bbd85950 基于主分支创建的分支
git commit -am"在子分支编辑git.text文件"
git log 查看当前分支的历史
git log --oneline 查看当前分支的历史
git log --all 查看所有分支的版本历史
git log --all --oneline 查看所有分支的版本历史
git log --all --graph 查看所有分支的版本历史 图形化展示
git log --all -n4 --graph 查看所有分支的版本历史 图形化展
gitk  图形化的工具

git checkout master 切换分支到master上面

$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"   创建ssh秘钥，默认即可

git remote add githubgit git@github.com:lengyue1084/git_learning.git 添加远端仓库


git push remote githubgit --all

git pull 远端拉下来并且执行合并

git fetch githubgit master

gitk --all

git checkout master 切换主分支






